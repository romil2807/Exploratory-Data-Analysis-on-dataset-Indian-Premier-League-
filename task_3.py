# -*- coding: utf-8 -*-
"""Task-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kwYq8QQHFvrSuu3w1NVg5rrZBrDh-e8l

# Romil Shah
Exploratory Data Analysis-IPL

## Importing Libraries and Loading dataset
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import numpy as np
df_match = pd.read_csv('/content/matches.csv')
df_delivery=pd.read_csv('/content/deliveries.csv')
df_match

df_delivery

"""Information about the matches"""

print("Number of matches played:",df_match.shape[0])
print("Number of season:",len(df_match.season.unique()))

df_match.describe()

""" Cleaning the data"""

df_match.isnull().sum()

df_match=df_match.drop(columns=['umpire3'],axis=1)

"""Analysis of the team"""

print("Team won by maximum runs")
df_match.iloc[df_match['win_by_runs'].idxmax()]['winner']

print("Team won by maximum wickets")
df_match.iloc[df_match['win_by_wickets'].idxmax()]['winner']

print("Team won by minimum runs")
df_match.iloc[df_match['win_by_runs'].idxmin()]['winner']

print("Team won by minimum runs")
df_match.iloc[df_match[df_match['win_by_wickets'].ge(1)].win_by_wickets.idxmin()]['winner']

# Number of matches each season
sb.countplot(x='season',data=df_match)
plt.figure(figsize=(15,8))
plt.show()

"""Analysis of the stadium

"""

#Number of matches each venue
plt.figure(figsize=(12,6))
sb.countplot(x='venue',data=df_match)
plt.xticks(rotation='vertical')
plt.show()

temp_df=pd.melt(df_match,id_vars=['id','season'],value_vars=['team1','team2'])
temp_df

plt.figure(figsize=(12,6))
sb.countplot(x='value',data=temp_df)
plt.xticks(rotation='vertical')
plt.show()

#Number of wins per team
plt.figure(figsize=(12,6))
sb.countplot(x='winner',data=df_match)
plt.xticks(rotation='vertical')
plt.show()

#winner each season
temp_df=df_match.drop_duplicates(subset=['season'],keep='last')[['season','winner']].reset_index(drop=True)
temp_df

#Toss Decision
temp_series=df_match.toss_decision.value_counts()
temp_series

"""Visualising the data"""

labels=(np.array(temp_series.index))
sizes=(np.array((temp_series/temp_series.sum())*100))
colors=['red','green']
plt.pie(sizes,labels=labels,colors=colors,autopct='%1.1f%%',shadow=True,startangle=70)

plt.figure(figsize=(12,6))
sb.countplot(x='season',hue='toss_decision',data=df_match)
plt.xticks(rotation='vertical')
plt.show()

#Win percent of batting second, assumed from above figure
num_of_wins=(df_match.win_by_wickets>0).sum()
num_of_loss=(df_match.win_by_wickets==0).sum()
labels=['Wins','Loss']
total=float(num_of_wins + num_of_loss)
sizes=[(num_of_wins/total)*100,(num_of_loss/total)*100]
colors=['red','lightgreen']
plt.pie(sizes,labels=labels,colors=colors,autopct='%1.1f%%',shadow=True,startangle=50)
plt.title("Win percentage of batting second")
plt.show()

top_players=df_match.player_of_match.value_counts()[:10]
fig,ax=plt.subplots()
ax.set_ylim([0,20])
ax.set_ylabel("Count")
ax.set_title("Top player of the match winners")
#top_players.plot.bar()
sb.barplot(x=top_players.index,y=top_players,orient='v');
plt.xticks(rotation='vertical')
plt.show()

ss=df_match['toss_winner']==df_match['winner']
ss.groupby(ss).size()

round(ss.groupby(ss).size()/ss.count()*100,2)

#toss performance
df_match[df_match['win_by_runs']>0].groupby(['winner'])['win_by_runs'].apply(np.median).sort_values(ascending=False)

#orange cap
or_cap=df_match[['id','season']]
or_cap=or_cap.merge(df_delivery,left_on='id',right_on='match_id')
or_cap=or_cap.groupby(['batsman','season'])['batsman_runs'].sum().reset_index()
or_cap=or_cap.sort_values('batsman_runs',ascending=False)
or_cap=or_cap.drop_duplicates(subset=['season'],keep='first')

or_cap

#team with maximum boundaries
sixes=df_delivery[df_delivery['batsman_runs']==6]['batting_team'].value_counts().reset_index()
fours=df_delivery[df_delivery['batsman_runs']==4]['batting_team'].value_counts().reset_index()
scores=sixes.merge(fours,left_on='index',right_on='index')
scores.column=[['team_name','4s','6s']]

"""Analysis of maximum boudaries"""

scores

#top umpires
ump=pd.DataFrame(pd.concat([df_match['umpire1'],df_match['umpire2']]),columns=['count'])
ump=ump.apply(pd.value_counts)
sb.barplot(y=ump[:10].index,x=ump[:10]['count'],palette='winter')

"""## Thank you!"""